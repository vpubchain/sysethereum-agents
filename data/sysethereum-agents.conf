# Whether to enable Syscoin block submitter agent.
syscoin.superblock.submitter.enabled = true

# Whether to enable Syscoin block challenger agent.
syscoin.superblock.challenger.enabled = true

# network mode (integration for testnet)
constants = integration
# constants = mainnet

# Gas price ranges, will get gas price from secondary url and cap out at 20 gWei

gas.price.min = 1000000000 // 1 gWei (minimum safe number, should change this based on market for avg/fast confirmation)
gas.price.max = 20000000000 // 20 gWei
# Gas limit used for all the txs
gas.limit = 5000000

# Address and unlocked account password used for sending/defending superblocks and contract calls that don't consume gas.
# Example:
general.purpose.and.send.superblocks.address = 0x1ac0ee367Bb9046935b689e8c728b042Abc86d33
# general.purpose.and.send.superblocks.address = 0x009ebdab614f770ed76dc9e7fe0d54e679950f60
general.purpose.and.send.superblocks.unlockpw = "999000"

# Address and unlocking account password used for challenging invalid superblocks.
# Example:
syscoin.superblock.challenger.address = 0x1ac0ee367Bb9046935b689e8c728b042Abc86d33
# syscoin.superblock.challenger.address = 0x009ebdab614f770ed76dc9e7fe0d54e679950f60
syscoin.superblock.challenger.unlockpw = "999000"


# Directory where sysethereum agents store syscoin blockchain.
# Example:
data.directory = "/root/.vircles/testnet3"

# Syscoin RPC settings, you only need to worry about this if you are hosting the agent and accessing the REST API, set this to empty otherwise
# Example:
syscoinrpc.user = chain
syscoinrpc.password = 999000
syscoinrpc.url_and_port = "http://localhost:9904/"

agent.mailer.enabled = false

# agent.mailer {
#     enabled: true,
#     smtp {
#         # See https://myaccount.google.com/lesssecureapps
#         host: "smtp.gmail.com",
#         port: 587,
#         username: "your_username",
#         password: "your_pass",
#         transportStrategy: "SMTP_TLS"  # Supported values: "SMTP", "SMTP_TLS" and "SMTPS"
#     },
#     challenge.notifier {
#         trigger: "MY_BLOCK",  # Supported values: "MY_BLOCK", "ANY_BLOCK"
#         from: "no-reply@example.com",
#         to: "john@doe.com",
#         subject: "Syscoin agent challenges superblock(s)!"
#     }
# }

# Secondary HTTP provider for web3j to read superblock information, this should be a dedicated fullnode or something like Infura
# Example:
# secondary.url = "https://mainnet.infura.io/v3/4889fed1249f42d1bb6b66c7be01f71b"
secondary.url = "https://rinkeby.infura.io/v3/4889fed1249f42d1bb6b66c7be01f71b"

geth.rpc.url_and_port = "http://52.82.14.63:8745/"

# Whether to automatically withdraw funds after a battle is finished
withdraw.funds.enabled = true

# Upper bound for deposited funds; some will be withdrawn if they surpass this limit
deposited.funds.limit = 3000000000000000000 // 3 Ether to keep in deposit to minimize time/cost for operational duty of agent

# SSL settings for REST server
server.enabled = true
server.ssl.key-store=/home/ubuntu/key/key.jks
server.ssl.key-store-password=999000
